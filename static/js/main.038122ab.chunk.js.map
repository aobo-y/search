{"version":3,"sources":["ItemList.js","App.js","config.js","serviceWorker.js","index.js","logo.svg"],"names":["Item","this","props","item","onClickHandler","url","URL","Meta","avatar","size","shape","src","host","title","className","href","target","rel","onClick","description","subtitle","desc","PureComponent","ItemList","getDummyItems","Array","keys","map","items","loading","onItemClickHandler","length","itemLayout","dataSource","renderItem","index","key","active","bind","api","axios","create","baseURL","Search","Input","App","setQuery","q","qs","parse","window","location","search","setState","query","searchRef","current","input","blur","get","params","then","resp","status","Error","data","focus","onSearch","val","trim","history","pushState","stringify","onItemClick","state","post","idx","total","React","createRef","Boolean","headerCls","logo","alt","placeholder","defaultValue","ref","Component","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","module","exports"],"mappings":"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","file":"static/js/main.038122ab.chunk.js","sourcesContent":["import React, { PureComponent } from 'react';\nimport propTypes from 'prop-types';\nimport { Skeleton, List, Avatar } from 'antd';\n\nimport './ItemList.css';\n\nclass Item extends PureComponent {\n  static propTypes = {\n    item: propTypes.shape({\n      url: propTypes.string,\n      title: propTypes.string,\n      subtitle: propTypes.string,\n      desc: propTypes.string,\n    }),\n    onClickHandler: propTypes.func\n  }\n\n  render() {\n    const { item, onClickHandler } = this.props;\n    const url = new URL(item.url);\n\n    return (\n      <>\n        <List.Item.Meta\n          avatar={\n            <Avatar\n              size=\"small\"\n              shape=\"square\"\n              src={'https://www.google.com/s2/favicons?domain_url=' + url.host}>\n                {item.title[0]}\n            </Avatar>\n          }\n          title={\n            <a\n              className=\"title-anchor\"\n              href={item.url}\n              target=\"_blank\"\n              rel=\"noopener noreferrer\"\n              onClick={onClickHandler}\n            >\n              {item.title}\n            </a>\n          }\n          description={item.subtitle}\n        />\n        {item.desc}\n      </>\n    );\n  }\n}\n\nclass ItemList extends PureComponent {\n  static propTypes = {\n    loading: propTypes.bool,\n    items: propTypes.arrayOf(propTypes.object),\n    onItemClickHandler: propTypes.func\n  }\n\n  getDummyItems = () => {\n    return [...Array(6).keys()].map(() => ({}));\n  }\n\n  render() {\n    const { items, loading, onItemClickHandler } = this.props;\n\n    return (\n      <div>\n        {loading || items.length + ' results'}\n        <List\n          className=\"search-list\"\n          itemLayout=\"vertical\"\n          size=\"large\"\n          dataSource={loading ? this.getDummyItems() : items}\n          renderItem={(item, index) => (\n            <List.Item key={index} >\n              {loading ?\n                <Skeleton loading={loading} active avatar /> :\n                <Item item={item} onClickHandler={onItemClickHandler.bind(this, index, item)} />\n              }\n            </List.Item>\n          )}\n        />\n      </div>\n    );\n  }\n\n}\n\nexport default ItemList;\n","import './App.css';\n\nimport React, { Component } from 'react';\nimport axios from 'axios';\nimport { Input } from 'antd';\nimport qs from 'query-string';\n\nimport ItemList from './ItemList';\nimport config from './config';\n\nimport logo from './logo.svg';\n\nconst api = axios.create({\n  baseURL: config.API_HOST\n});\n\nconst { Search } = Input;\n\nclass App extends Component {\n  constructor(props) {\n    super(props);\n\n    this.searchRef = React.createRef();\n\n    const {q} = qs.parse(window.location.search);\n    this.state = {\n      query: q,\n      loading: Boolean(q),\n      items: null\n    };\n  }\n\n  componentDidMount() {\n    this.setQuery();\n  }\n\n  setQuery = () => {\n    let {q} = qs.parse(window.location.search);\n\n    if (q) {\n      this.setState({ query: q, loading: true }, () => {\n        this.searchRef.current.input.blur(); // only work with delay\n      });\n\n      api.get('/search', {\n        params: {\n          q\n        }\n      }).then(resp => {\n        if (resp.status !== 200) {\n          throw Error(resp.data);\n        }\n\n        this.setState({\n          items: resp.data,\n          loading: false\n        });\n      });\n\n    } else {\n      this.searchRef.current.focus();\n    }\n  }\n\n  onSearch = val => {\n    val = val.trim();\n    if (!val) {\n      return;\n    }\n\n    window.history.pushState({}, null, '?' + qs.stringify({ q: val }));\n    this.setQuery();\n  }\n\n  onItemClick = (index, item) => {\n    const { query, items } = this.state;\n\n    api.post('/click', {\n      query,\n      idx: index,\n      total: items.length,\n      url: item.url,\n    }).then(resp => {\n      if (resp.status !== 200) {\n        throw Error(resp.data);\n      }\n    });\n  }\n\n  render() {\n    const { query, loading, items } = this.state;\n\n    let headerCls = 'App-header';\n    if (query) {\n      headerCls += ' App-header__squeezed';\n    }\n\n    return (\n      <div className=\"App\">\n        <header className={headerCls}>\n          {\n            query ?\n              (<a href=\"/\">\n                <img src={logo} className=\"App-logo\" alt=\"logo\" />\n              </a>) :\n              <img src={logo} className=\"App-logo\" alt=\"logo\" />\n          }\n          <div className=\"App-search\">\n            <Search\n              placeholder=\"input search text\"\n              size=\"large\"\n              onSearch={this.onSearch}\n              defaultValue={query}\n              ref={this.searchRef}\n            />\n          </div>\n        </header>\n          {\n            query && (\n              <div className=\"App-content\">\n                <ItemList\n                  loading={loading}\n                  items={items}\n                  onItemClickHandler={this.onItemClick}\n                />\n              </div>\n            )\n          }\n      </div>\n    );\n  }\n}\n\nexport default App;\n","export default {\n  API_HOST: 'https://mysterious-lowlands-29750.herokuapp.com/v1/'\n};\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";"],"sourceRoot":""}